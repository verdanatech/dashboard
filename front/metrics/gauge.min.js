// Colour settings
if (themeColour == 'white') {
    var metric = '#a9a9a9';
    var backColor = '#7d7d7d';
    var pointerColor = '#898989';
    var pageBackgorund = '#fff';
    var pieTrack = metric;
    var pieBar = backColor;
    var gaugeTrackColor = metric;
    var gaugeBarColor = backColor;
    var gaugePointerColor = '#ccc';
    //var pieSegColors = [metric,'#868686','#636363','#404040','#1d1d1d'];
    var pieSegColors = [metric, '#058DC7', '#50B432', '#ED561B', '#DDDF00', '#24CBE5', '#64E572', '#FF9655', '#FFF263', '#6AF9C4'];
    var bbarColor = '#7d7d7d';
    var btrackColor = '#ccc';
}

else {
    //default to black
    var backColor = '#4f4f4f';
    var metric = '#f2f2f2';
    var pointerColor = '#898989';
    var pageBackgorund = '#2b2b2b';
    //var pieSegColors = [metric,'#c0c0c0','#8e8e8e','#5b5b5b','#292929'];
    var pieSegColors = [metric, '#058DC7', '#50B432', '#ED561B', '#DDDF00', '#24CBE5', '#64E572', '#FF9655', '#FFF263', '#6AF9C4'];
    var pieTrack = backColor;
    var pieBar = metric;
    var gaugeTrackColor = '#4f4f4f';
    var gaugeBarColor = '#898989';
    var gaugePointerColor = metric;
    var bbarColor = '#f9f9f9';
    var btrackColor = '#4f4f4f';
}

// Stores
var cf_rSVPs = [];
var cf_rGs = [];
var cf_rLs = [];
var cf_rPs = [];
var cf_rRags = [];
var cf_rFunnels = [];



function initGauge(minVal1, maxVal1, newVal1) {

    $(document).ready(function () {
        //Initialise gauges to default 
        $('.cf-gauge1').each(function () {

            // Gather IDs 
            var gId = $(this).prop('id');					// Gauge container id e.g. cf-gauge-1
            var gcId = $('canvas', $(this)).prop('id');		// Gauge canvas id e.g. cf-gauge-1-g
            var gmId = $('.metric', $(this)).prop('id');  	// Gauge metric id e.g. cf-gauge-1-m

            //Create a canvas
            var ratio = 2.1;
            var width = $('.canvas', $(this)).width();
            var height = Math.round(width / ratio);
            $('canvas', $(this)).prop('width', width).prop('height', height);

            // Set options  	
            rGopts = {};
            rGopts.lineWidth = 0.30;
            rGopts.strokeColor = gaugeTrackColor;
            rGopts.limitMax = true;
            rGopts.colorStart = gaugeBarColor;
            rGopts.percentColors = void 0;
            rGopts.pointer = {
                length: 0.7,
                strokeWidth: 0.035,
                color: gaugePointerColor
            };

            // Create gauge
            cf_rGs[gId] = new Gauge(document.getElementById(gcId)).setOptions(rGopts);
            cf_rGs[gId].setTextField(document.getElementById(gmId));

            // Set up values for gauge (in reality it'll likely be done one by one calling the function, not from here)

            updateOpts = { 'minVal': minVal1, 'maxVal': maxVal1, 'newVal': newVal1 };
            gaugeUpdate(gId, updateOpts);


            // Responsiveness	
            $(window).resize(function () {

                //Get canvas measurements
                var ratio = 1.8;
                var width = $('.canvas', $('#' + gId)).width();
                var height = Math.round(width / ratio);

                cf_rGs[gId].ctx.clearRect(0, 0, width, height);
                $('canvas', $('#' + gId)).width(width).height(height);
                cf_rGs[gId].render();
            });

        });
    });

}
function initGauge2(minVal1, maxVal1, newVal1) {

    $(document).ready(function () {
        //Initialise gauges to default 
        $('.cf-gauge2').each(function () {

            // Gather IDs 
            var gId = $(this).prop('id');					// Gauge container id e.g. cf-gauge-1
            var gcId = $('canvas', $(this)).prop('id');		// Gauge canvas id e.g. cf-gauge-1-g
            var gmId = $('.metric', $(this)).prop('id');  	// Gauge metric id e.g. cf-gauge-1-m

            //Create a canvas
            var ratio = 2.1;
            var width = $('.canvas', $(this)).width();
            var height = Math.round(width / ratio);
            $('canvas', $(this)).prop('width', width).prop('height', height);

            // Set options  	
            rGopts = {};
            rGopts.lineWidth = 0.30;
            rGopts.strokeColor = gaugeTrackColor;
            rGopts.limitMax = true;
            rGopts.colorStart = gaugeBarColor;
            rGopts.percentColors = void 0;
            rGopts.pointer = {
                length: 0.7,
                strokeWidth: 0.035,
                color: gaugePointerColor
            };

            // Create gauge
            cf_rGs[gId] = new Gauge(document.getElementById(gcId)).setOptions(rGopts);
            cf_rGs[gId].setTextField(document.getElementById(gmId));

            // Set up values for gauge (in reality it'll likely be done one by one calling the function, not from here)

            updateOpts = { 'minVal': minVal1, 'maxVal': maxVal1, 'newVal': newVal1 };
            gaugeUpdate(gId, updateOpts);


            // Responsiveness	
            $(window).resize(function () {

                //Get canvas measurements
                var ratio = 1.8;
                var width = $('.canvas', $('#' + gId)).width();
                var height = Math.round(width / ratio);

                cf_rGs[gId].ctx.clearRect(0, 0, width, height);
                $('canvas', $('#' + gId)).width(width).height(height);
                cf_rGs[gId].render();
            });

        });
    });

}
function initGauge3(minVal1, maxVal1, newVal1) {

    $(document).ready(function () {
        //Initialise gauges to default 
        $('.cf-gauge3').each(function () {

            // Gather IDs 
            var gId = $(this).prop('id');					// Gauge container id e.g. cf-gauge-1
            var gcId = $('canvas', $(this)).prop('id');		// Gauge canvas id e.g. cf-gauge-1-g
            var gmId = $('.metric', $(this)).prop('id');  	// Gauge metric id e.g. cf-gauge-1-m

            //Create a canvas
            var ratio = 2.1;
            var width = $('.canvas', $(this)).width();
            var height = Math.round(width / ratio);
            $('canvas', $(this)).prop('width', width).prop('height', height);

            // Set options  	
            rGopts = {};
            rGopts.lineWidth = 0.30;
            rGopts.strokeColor = gaugeTrackColor;
            rGopts.limitMax = true;
            rGopts.colorStart = gaugeBarColor;
            rGopts.percentColors = void 0;
            rGopts.pointer = {
                length: 0.7,
                strokeWidth: 0.035,
                color: gaugePointerColor
            };

            // Create gauge
            cf_rGs[gId] = new Gauge(document.getElementById(gcId)).setOptions(rGopts);
            cf_rGs[gId].setTextField(document.getElementById(gmId));

            // Set up values for gauge (in reality it'll likely be done one by one calling the function, not from here)

            updateOpts = { 'minVal': minVal1, 'maxVal': maxVal1, 'newVal': newVal1 };
            gaugeUpdate(gId, updateOpts);


            // Responsiveness	
            $(window).resize(function () {

                //Get canvas measurements
                var ratio = 1.8;
                var width = $('.canvas', $('#' + gId)).width();
                var height = Math.round(width / ratio);

                cf_rGs[gId].ctx.clearRect(0, 0, width, height);
                $('canvas', $('#' + gId)).width(width).height(height);
                cf_rGs[gId].render();
            });

        });
    });

}
function initGauge4(minVal1, maxVal1, newVal1) {

    $(document).ready(function () {
        //Initialise gauges to default 
        $('.cf-gauge4').each(function () {

            // Gather IDs 
            var gId = $(this).prop('id');					// Gauge container id e.g. cf-gauge-1
            var gcId = $('canvas', $(this)).prop('id');		// Gauge canvas id e.g. cf-gauge-1-g
            var gmId = $('.metric', $(this)).prop('id');  	// Gauge metric id e.g. cf-gauge-1-m

            //Create a canvas
            var ratio = 2.1;
            var width = $('.canvas', $(this)).width();
            var height = Math.round(width / ratio);
            $('canvas', $(this)).prop('width', width).prop('height', height);

            // Set options  	
            rGopts = {};
            rGopts.lineWidth = 0.30;
            rGopts.strokeColor = gaugeTrackColor;
            rGopts.limitMax = true;
            rGopts.colorStart = gaugeBarColor;
            rGopts.percentColors = void 0;
            rGopts.pointer = {
                length: 0.7,
                strokeWidth: 0.035,
                color: gaugePointerColor
            };

            // Create gauge
            cf_rGs[gId] = new Gauge(document.getElementById(gcId)).setOptions(rGopts);
            cf_rGs[gId].setTextField(document.getElementById(gmId));

            // Set up values for gauge (in reality it'll likely be done one by one calling the function, not from here)

            updateOpts = { 'minVal': minVal1, 'maxVal': maxVal1, 'newVal': newVal1 };
            gaugeUpdate(gId, updateOpts);


            // Responsiveness	
            $(window).resize(function () {

                //Get canvas measurements
                var ratio = 1.8;
                var width = $('.canvas', $('#' + gId)).width();
                var height = Math.round(width / ratio);

                cf_rGs[gId].ctx.clearRect(0, 0, width, height);
                $('canvas', $('#' + gId)).width(width).height(height);
                cf_rGs[gId].render();
            });

        });
    });

}
function initGauge5(minVal1, maxVal1, newVal1) {

    $(document).ready(function () {
        //Initialise gauges to default 
        $('.cf-gauge5').each(function () {

            // Gather IDs 
            var gId = $(this).prop('id');					// Gauge container id e.g. cf-gauge-1
            var gcId = $('canvas', $(this)).prop('id');		// Gauge canvas id e.g. cf-gauge-1-g
            var gmId = $('.metric', $(this)).prop('id');  	// Gauge metric id e.g. cf-gauge-1-m

            //Create a canvas
            var ratio = 2.1;
            var width = $('.canvas', $(this)).width();
            var height = Math.round(width / ratio);
            $('canvas', $(this)).prop('width', width).prop('height', height);

            // Set options  	
            rGopts = {};
            rGopts.lineWidth = 0.30;
            rGopts.strokeColor = gaugeTrackColor;
            rGopts.limitMax = true;
            rGopts.colorStart = gaugeBarColor;
            rGopts.percentColors = void 0;
            rGopts.pointer = {
                length: 0.7,
                strokeWidth: 0.035,
                color: gaugePointerColor
            };

            // Create gauge
            cf_rGs[gId] = new Gauge(document.getElementById(gcId)).setOptions(rGopts);
            cf_rGs[gId].setTextField(document.getElementById(gmId));

            // Set up values for gauge (in reality it'll likely be done one by one calling the function, not from here)

            updateOpts = { 'minVal': minVal1, 'maxVal': maxVal1, 'newVal': newVal1 };
            gaugeUpdate(gId, updateOpts);


            // Responsiveness	
            $(window).resize(function () {

                //Get canvas measurements
                var ratio = 1.8;
                var width = $('.canvas', $('#' + gId)).width();
                var height = Math.round(width / ratio);

                cf_rGs[gId].ctx.clearRect(0, 0, width, height);
                $('canvas', $('#' + gId)).width(width).height(height);
                cf_rGs[gId].render();
            });

        });
    });

}
function initGauge6(minVal1, maxVal1, newVal1) {

    $(document).ready(function () {
        //Initialise gauges to default 
        $('.cf-gauge6').each(function () {

            // Gather IDs 
            var gId = $(this).prop('id');					// Gauge container id e.g. cf-gauge-1
            var gcId = $('canvas', $(this)).prop('id');		// Gauge canvas id e.g. cf-gauge-1-g
            var gmId = $('.metric', $(this)).prop('id');  	// Gauge metric id e.g. cf-gauge-1-m

            //Create a canvas
            var ratio = 2.1;
            var width = $('.canvas', $(this)).width();
            var height = Math.round(width / ratio);
            $('canvas', $(this)).prop('width', width).prop('height', height);

            // Set options  	
            rGopts = {};
            rGopts.lineWidth = 0.30;
            rGopts.strokeColor = gaugeTrackColor;
            rGopts.limitMax = true;
            rGopts.colorStart = gaugeBarColor;
            rGopts.percentColors = void 0;
            rGopts.pointer = {
                length: 0.7,
                strokeWidth: 0.035,
                color: gaugePointerColor
            };

            // Create gauge
            cf_rGs[gId] = new Gauge(document.getElementById(gcId)).setOptions(rGopts);
            cf_rGs[gId].setTextField(document.getElementById(gmId));

            // Set up values for gauge (in reality it'll likely be done one by one calling the function, not from here)

            updateOpts = { 'minVal': minVal1, 'maxVal': maxVal1, 'newVal': newVal1 };
            gaugeUpdate(gId, updateOpts);


            // Responsiveness	
            $(window).resize(function () {

                //Get canvas measurements
                var ratio = 1.8;
                var width = $('.canvas', $('#' + gId)).width();
                var height = Math.round(width / ratio);

                cf_rGs[gId].ctx.clearRect(0, 0, width, height);
                $('canvas', $('#' + gId)).width(width).height(height);
                cf_rGs[gId].render();
            });

        });
    });

}




function gaugeUpdate(gauge, opts) {
    if (opts.minVal) {
        $('.val-min .metric-small', $('#' + gauge)).html(opts.minVal);
        cf_rGs[gauge].minValue = opts.minVal;
    }
    if (opts.maxVal) {
        cf_rGs[gauge].maxValue = opts.maxVal;
        $('.val-max .metric-small', $('#' + gauge)).html(opts.maxVal);
    }
    if (opts.newVal) {
        cf_rGs[gauge].set(parseInt(opts.newVal));
    }
}


